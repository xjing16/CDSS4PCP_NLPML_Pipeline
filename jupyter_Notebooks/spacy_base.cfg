# This is an auto-generated partial config. To use it with 'spacy train'
# you can run spacy init fill-config to auto-fill all default settings:
# python -m spacy init fill-config ./base_config.cfg ./config.cfg
[paths]
train = null
dev = null
vectors = null
[system]
gpu_allocator = "pytorch"

[nlp]
lang = "en"
pipeline = ["transformer","ner"]
batch_size = 128

[components]

[components.transformer]
#source = "en_core_sci_lg"
factory = "transformer"

[components.transformer.model]
@architectures = "spacy-transformers.TransformerModel.v3"
name = "roberta-base"
# name = "scispacy_cdss_bert/en_cdss_bert-0.0.1/"
#name = "allenai/scibert_scivocab_cased"
tokenizer_config = {"use_fast": true}

[components.transformer.model.get_spans]
@span_getters = "spacy-transformers.strided_spans.v1"
window = 128
stride = 96

[components.ner]
source = "en_core_sci_lg"
# replace_listeners: ["model.tok2vec"]

[components.ner.model]
@architectures = "spacy.TransitionBasedParser.v2"
state_type = "ner"
extra_state_tokens = false
hidden_width = 64
maxout_pieces = 2
use_upper = false
nO = null

[components.ner.model.tok2vec]
@architectures = "spacy-transformers.TransformerListener.v1"
grad_factor = 1.0

[components.ner.model.tok2vec.pooling]
@layers = "reduce_mean.v1"

# [components.ner.model.tok2vec.embed]
# @architectures = "spacy.MultiHashEmbed.v2"
# width = 96
# attrs = ["NORM","PREFIX","SUFFIX","SHAPE","SPACY"]
# # width = ${components.tagger.model.tok2vec.encode.width}
# # attrs = ["NORM","DEP"]
# # rows = [5000,2500]
# rows = [5000,1000,2500,2500,50]
# include_static_vectors = false

# [components.ner.model.tok2vec.encode]
# @architectures = "spacy.MaxoutWindowEncoder.v2"
# width = 96
# depth = 4
# window_size = 1
# maxout_pieces = 3

# [components.parser]
# source = "en_core_sci_lg"

[corpora]

[corpora.train]
@readers = "spacy.Corpus.v1"
path = ${paths.train}
max_length = 0

[corpora.dev]
@readers = "spacy.Corpus.v1"
path = ${paths.dev}
max_length = 0

[training]
accumulate_gradient = 3
dev_corpus = "corpora.dev"
train_corpus = "corpora.train"
# frozen_components = ["transformer"]

[training.optimizer]
@optimizers = "Adam.v1"

[training.optimizer.learn_rate]
@schedules = "warmup_linear.v1"
warmup_steps = 250
total_steps = 20000
initial_rate = 5e-5

[training.batcher]
@batchers = "spacy.batch_by_padded.v1"
discard_oversize = true
size = 2000
buffer = 256

# [resume_training.before_init]
# @callbacks: "spacy.copy_from_base_model.v1"
# tokenizer: "en_core_sci_lg"
# vocab: "en_core_sci_lg"

# [resume_training]
# vectors = None
# # lookups = None
[initialize]
vectors = ${paths.vectors}

# [initialize]
# vectors = None

[initialize.before_init]
@callbacks: "spacy.copy_from_base_model.v1"
tokenizer: "en_core_sci_lg"
vocab: "en_core_sci_lg"

# [components.ner]
# source = "/path/to/model-best"

# [components.transformer]
# source = "/path/to/model-best"